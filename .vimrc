"Plugins////////////////////////////////////////////////////////////////
set nocompatible "–ß—Ç–æ —Ç–æ —Ç–∞–º —Å Vi —Å–≤—è–∑–∞–Ω–Ω–æ–µ
let g:polyglot_disabled = ['markdown'] "Polyglot default
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } "–î–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞
Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " Nice tree
Plug 'ryanoasis/vim-devicons' " icons 
Plug 'airblade/vim-gitgutter' "–ß—Ç–æ-—Ç–æ –ø—Ä–æ –≥–∏—Ç
Plug 'bignimbus/pop-punk.vim' "colorschemes
Plug 'mbbill/undotree' " –ë—É—Ñ–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ f5
Plug 'vim-airline/vim-airline' "–ë–∞—Ä –≤–Ω–∏–∑—É
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-commentary' "gc –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
Plug 'mihaifm/bufstop' "–±—É—Ñ–µ—Ä –Ω–≤–∏–≥–∞—Ü–∏—è
Plug 'tpope/vim-surround' "–û–±–µ—Ä–Ω—É—Ç—å –≤ —Ç–µ–≥–∏
Plug 'tpope/vim-repeat' " –†–µ–ø–∏—Ç –¥–ª—è –æ–±–æ—Ä–æ—Ç–∞ –≤ —Ç–µ–≥–∏
Plug 'mattn/emmet-vim' " Html —Å–Ω–∏–ø–µ—Ç
"js +ts plugins
"Plug 'HerringtonDarkholme/yats.vim' "–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è TS
Plug 'sheerun/vim-polyglot' "–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤!!

"Plug 'pangloss/vim-javascript' "–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏—Ç–∞–∫—Å–∏—Å–∞ js
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"Plug 'dense-analysis/ale' "–≤–º–µ—Å—Ç–æ coc.nvim

" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
call plug#end()

set number
set expandtab
set tabstop=2
set hlsearch
set incsearch
set mouse=a
let mapleader=" "
set mousemodel=popup
set scrolloff=8
set updatetime=750
set clipboard=unnamedplus " –æ–±—â–∏–π clipboard –≤ linux –∏ vim
set showcmd " –ø–æ–∫–∞–∑—ã–≤–µ—Ç "
set backspace=eol,start,indent "–¢–∏–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç backspace(?)
set whichwrap+=<,>,h,l " —Ö–∑ —á—Ç–æ —ç—Ç–æ, —á—Ç–æ —Ç–æ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏(?)
set signcolumn=yes

"Coc-depend////////////////////////////////////////////////////////////////
" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=UTF-8

" TextEdit might fail if hidden is not set.
set hidden

" Give more space for displaying messages.
set cmdheight=2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

"colorScheme////////////////////////////////////////////////////////////////
colorscheme pop-punk
set background=dark
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set fillchars+=vert:‚îÇ
hi VertSplit ctermbg=NONE guibg=NONE

" Restore last position////////////////////////////////////////////////////////////////
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"mappings////////////////////////////////////////////////////////////////
"nerdtree NERDTree
"map <C-n> :NERDTreeToggle<CR>
"map <F6> :UndotreeToggle<CR>
nnoremap <leader>nn :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>
let NERDTreeShowHidden=1

"mapings for buffer 1. –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä(—Ç–∏–ø–æ –∑–∞–∫—Ä—ã—Ç—å)
"qa –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –±—É—Ñ–µ—Ä—ã –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
nmap <leader>qa :bufdo bd<cr> 
nmap <leader>qq :bd<cr>
nmap <leader>l :bnext<cr>
nmap <leader>h :bp<cr>

"buffer toggle
map <leader>b :Bufstop<CR>
let g:BufstopAutoSpeedToggle = 1
"map <leader>b :ls<CR>:b " –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞—Ñ—Ñ–µ—Ä—ã
" Window navigation////////////////////////////////////////////////////////////////
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Airline////////////////////////////////////////////////////////////////
" –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = '‚ò∞'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'

let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#hunks#coc_git = 1
let g:airline_theme = 'pop_punk'
let g:airline_section_z = airline#section#create('%3p%% %#__accent_bold#%4l%#__restore__#%#__accent_bold#/%L%#__restore__# %3v') " —ç—Ç–∞ —à—Ç—É–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∏–∂–Ω–∏–π –±–∞—Ä
"vim-coc////////////////////////////////////////////////////////////////
let g:coc_disable_startup_warning = 1

"vim-coc tab autocomplite
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

"vim-coc –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–µ—Ä
"nmap <leader> ca <Plug>(coc-codeaction)
xmap <leader>a  <Plug>(coc-codeaction)
nmap <leader>a  <Plug>(coc-codeaction)

"vim-coc –Ω–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

"vim-coc fix
nmap <leader>qf <Plug>(coc-fix-current)

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" rename in all files
nmap <leader>rn <Plug>(coc-rename)

" All extencions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
"
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Add `:Format` command to format current buffer with pretter.
"command! -nargs=0 Format :call CocActionAsync('format')
command! -nargs=0 Format :call CocAction('runCommand', 'prettier.formatFile')
nmap  <leader>f :Format<cr>
" —ç—Ç–æ —á—Ç–æ gd —Ä–∞–±–æ—Ç–∞–ª–æ
let g:coc_global_extensions = ['coc-tsserver', 'coc-json', 'coc-css', 'coc-html']

"coc-eslint
":CocCommand eslint.executeAutofix

" Fzf fzf maps
map <Leader>mf :Files<CR>
map <Leader>ma :Rg<CR>
let $FZF_DEFAULT_COMMAND = 'rg --files --follow'

